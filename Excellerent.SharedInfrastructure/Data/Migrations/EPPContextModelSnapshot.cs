// <auto-generated />
using System;
using Excellerent.SharedInfrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Excellerent.SharedInfrastructure.Data.Migrations
{
    [DbContext(typeof(EPPContext))]
    partial class EPPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Applicant", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUpload")
                        .HasColumnType("text");

                    b.Property<string>("ResumeUpload")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.ApplicantAreaOfInterest", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LuPositionToApplyGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("MonthOfExpierence")
                        .HasColumnType("integer");

                    b.Property<string>("OtherSkillSet")
                        .HasColumnType("text");

                    b.Property<Guid>("PositionToApplyID")
                        .HasColumnType("uuid");

                    b.Property<string>("PrimarySkillSetID")
                        .HasColumnType("text");

                    b.Property<Guid>("ProficiencyLevelID")
                        .HasColumnType("uuid");

                    b.Property<string>("SecondarySkillSetID")
                        .HasColumnType("text");

                    b.Property<int>("YearsOfExpierence")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("LuPositionToApplyGuid");

                    b.HasIndex("ProficiencyLevelID");

                    b.ToTable("ApplicantAreaOfInterest");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Education", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EducationProgrammeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldOfStudyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Institution")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherFieldOfStudy")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("EducationProgrammeId");

                    b.HasIndex("FieldOfStudyId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.JobRequirment", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobBrief")
                        .HasColumnType("text");

                    b.Property<string>("JobDescriptionName")
                        .HasColumnType("text");

                    b.Property<string>("JobResponsiblity")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("JobRequirment");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUEducationProgram", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("EducationProgrammes");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUFieldOfStudy", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("EducationName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.ToTable("FieldOfStudie");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionSkillSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LUPositionToApplyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LUSkillSetId")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("LUPositionToApplyId");

                    b.HasIndex("LUSkillSetId");

                    b.ToTable("LUPositionSkillSet");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("PositionToApply");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUProficiencyLevel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ProficiencyLevel");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillPositionAssociation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("OtherSkillSet")
                        .HasColumnType("integer");

                    b.Property<int>("PositionToApplyID")
                        .HasColumnType("integer");

                    b.Property<int>("PrimarySkillSetID")
                        .HasColumnType("integer");

                    b.Property<int>("SecondarySkillSetID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("luPositionToApplyGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("skillSetGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("luPositionToApplyGuid");

                    b.HasIndex("skillSetGuid");

                    b.ToTable("SkillPositionAssociation");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SkillName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("SkillSet");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.BillingAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Affliation")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("BillingAddresses");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientContact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumberPrefix")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("ClientContacts");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<Guid>("ClientStatusGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SalesPersonGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ClientStatusGuid");

                    b.ToTable("ClientDetails");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientStatus", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ClientStatus");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.CompanyContact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("CompanyContacts");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.OperatingAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("OperatingAddresses");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.AssignResourcEntity", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProjectGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ProjectGuid");

                    b.ToTable("AssignResources");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Client", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<string>("ClientStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ManagerAssigned")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectStatusGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SupervisorGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ClientGuid");

                    b.HasIndex("ProjectStatusGuid");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.ProjectStatus", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowResource")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ProjectStatus");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Country", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DeviceDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllocateTo")
                        .HasColumnType("text");

                    b.Property<string>("BusinessUnit")
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyDeviceCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceClassificationGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IsWorking")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Purchaser")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("SubCategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Warranty")
                        .HasColumnType("text");

                    b.Property<DateTime>("WarrantyEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Guid");

                    b.ToTable("DeviceDetails");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DutyBranch", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("CountryId");

                    b.ToTable("DutyBranches");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("StateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("SubCityZone")
                        .HasColumnType("text");

                    b.Property<string>("Woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("EmergencyAddresses");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyContactsModel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("GrandFatherName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Relationship")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("email2")
                        .HasColumnType("text");

                    b.Property<string>("email3")
                        .HasColumnType("text");

                    b.Property<string>("houseNumber")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber2")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber3")
                        .HasColumnType("text");

                    b.Property<string>("postalCode")
                        .HasColumnType("text");

                    b.Property<string>("stateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("subCityZone")
                        .HasColumnType("text");

                    b.Property<string>("woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("EmergencyContactsModel");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GrandFatherName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail2")
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail3")
                        .HasColumnType("text");

                    b.Property<string>("Phone1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BranchGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompaynEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DutyBranch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReportingManager")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Guid");

                    b.HasIndex("BranchGuid");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeOrganizations");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.FamilyDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RelationshipId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("FamilyDetails");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Nationality", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.PersonalAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("StateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("SubCityZone")
                        .HasColumnType("text");

                    b.Property<string>("Woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("PersonalAddresses");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Relationship", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Relationship");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.Configuration", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("DataType")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeEntry", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Hour")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimesheetGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("TimesheetGuid");

                    b.ToTable("TimeEntry");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TotalHours")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("TimeSheet");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimesheetApproval", b =>
                {
                    b.Property<Guid>("TimesheetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("TimesheetId", "ProjectId");

                    b.ToTable("TimesheetAprovals");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSetPermission", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupSetId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("GroupSetId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GroupSetPermissions");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.Permission", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyValue")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentCode")
                        .HasColumnType("text");

                    b.Property<string>("PermissionCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("4cc51c61-b990-4354-a3f8-51f24ac3b692"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 753, DateTimeKind.Local).AddTicks(8457),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "create_timesheet",
                            Level = "1",
                            Name = "addtimeentry",
                            ParentCode = "001",
                            PermissionCode = "00101"
                        },
                        new
                        {
                            Guid = new Guid("cc115f5c-0400-4fa0-baf2-87e6944bd2ac"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1024),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Timesheet",
                            Level = "1",
                            Name = "gettimesheet",
                            ParentCode = "001",
                            PermissionCode = "00102"
                        },
                        new
                        {
                            Guid = new Guid("2f0c6e80-0bb2-4d49-b28f-8b682922dd59"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1102),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetTimeEntries",
                            Level = "1",
                            Name = "gettimeentries",
                            ParentCode = "001",
                            PermissionCode = "00103"
                        },
                        new
                        {
                            Guid = new Guid("48aac3c4-42ec-48fc-80fd-8cc911f68bb5"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1107),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_TimeEntry",
                            Level = "1",
                            Name = "updatetimeentry",
                            ParentCode = "001",
                            PermissionCode = "00104"
                        },
                        new
                        {
                            Guid = new Guid("96dd4c07-dd55-4879-8957-ba3e787764fe"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1111),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_TimeEntry",
                            Level = "1",
                            Name = "deletetimeentry",
                            ParentCode = "001",
                            PermissionCode = "00105"
                        },
                        new
                        {
                            Guid = new Guid("57f766e2-64e6-43c8-b7eb-400b75d19500"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1254),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetApprovalStatus",
                            Level = "1",
                            Name = "getapprovalstatus",
                            ParentCode = "001",
                            PermissionCode = "00106"
                        },
                        new
                        {
                            Guid = new Guid("f0e81a90-5b7e-4ccd-b6a8-b9efece858dd"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1261),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Approve_timesheet",
                            Level = "1",
                            Name = "addapprovalstatus",
                            ParentCode = "001",
                            PermissionCode = "00107"
                        },
                        new
                        {
                            Guid = new Guid("4702e9aa-98f1-4aa9-83d1-3daf4d0c81cd"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1279),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Reject_TimeSheet",
                            Level = "1",
                            Name = "rejecttimesheet",
                            ParentCode = "001",
                            PermissionCode = "00108"
                        },
                        new
                        {
                            Guid = new Guid("98b0340b-bf01-4aa1-9886-d938ea82ccb8"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1282),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Request_ForReview",
                            Level = "1",
                            Name = "requestforreview",
                            ParentCode = "001",
                            PermissionCode = "00109"
                        },
                        new
                        {
                            Guid = new Guid("bd59963e-bbb4-4380-ba20-abd914c97011"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1287),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetTimeSheetConfiguration",
                            Level = "1",
                            Name = "gettimesheetconfiguration",
                            ParentCode = "001",
                            PermissionCode = "00110"
                        },
                        new
                        {
                            Guid = new Guid("c39ed767-61ec-43cd-9188-697e27c87d88"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1290),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Assign_Resource",
                            Level = "1",
                            Name = "addassignresource",
                            ParentCode = "002",
                            PermissionCode = "00201"
                        },
                        new
                        {
                            Guid = new Guid("bb8a27ac-d724-41b6-83ce-e87867bc7470"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1293),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Resources",
                            Level = "1",
                            Name = "getassignresource",
                            ParentCode = "002",
                            PermissionCode = "00202"
                        },
                        new
                        {
                            Guid = new Guid("794bbe07-a319-4161-8b5b-606b5d02a3bb"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1296),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetAssignedResourceById",
                            Level = "1",
                            Name = "getassignresourcebyid",
                            ParentCode = "002",
                            PermissionCode = "00203"
                        },
                        new
                        {
                            Guid = new Guid("498ba28e-45dc-442b-8845-6b2e410cb213"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1300),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Resources",
                            Level = "1",
                            Name = "updateassignresource",
                            ParentCode = "002",
                            PermissionCode = "00204"
                        },
                        new
                        {
                            Guid = new Guid("b014fd00-4334-409f-83a1-a686891bc8f2"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1302),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Remove_Resource",
                            Level = "1",
                            Name = "deleteassignresource",
                            ParentCode = "002",
                            PermissionCode = "00205"
                        },
                        new
                        {
                            Guid = new Guid("58ca0a8b-1e85-4c00-bef5-85434644482f"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1309),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Project",
                            Level = "1",
                            Name = "get",
                            ParentCode = "002",
                            PermissionCode = "00206"
                        },
                        new
                        {
                            Guid = new Guid("1a17bf32-7917-43a7-86c0-5f10e626338c"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1312),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Project",
                            Level = "1",
                            Name = "add",
                            ParentCode = "002",
                            PermissionCode = "00207"
                        },
                        new
                        {
                            Guid = new Guid("bd1a997d-2c16-41ee-bcee-0c5bac342bb3"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1316),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Project",
                            Level = "1",
                            Name = "edit",
                            ParentCode = "002",
                            PermissionCode = "00208"
                        },
                        new
                        {
                            Guid = new Guid("0b8495ee-adc8-4e99-83ea-cef9cdf27c23"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1318),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Remove_Project",
                            Level = "1",
                            Name = "remove",
                            ParentCode = "002",
                            PermissionCode = "00209"
                        },
                        new
                        {
                            Guid = new Guid("a8bdeb4c-c6bb-4369-a97b-e9bd918b7901"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1321),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "AddProjectStatus",
                            Level = "1",
                            Name = "add",
                            ParentCode = "002",
                            PermissionCode = "00210"
                        },
                        new
                        {
                            Guid = new Guid("06e82096-e927-47da-9b8e-40f59b149ddb"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1324),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "ViewProjectStatus",
                            Level = "1",
                            Name = "getall",
                            ParentCode = "002",
                            PermissionCode = "00211"
                        },
                        new
                        {
                            Guid = new Guid("3ddf875b-e74d-4b22-af28-a3b3a1cdd23d"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1327),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetProjectStatusById",
                            Level = "1",
                            Name = "getprojectstatusbyid",
                            ParentCode = "002",
                            PermissionCode = "00212"
                        },
                        new
                        {
                            Guid = new Guid("2b1c3828-099e-4320-b3c2-2f26fd2bc98f"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1329),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "RemoveProjectStatus ",
                            Level = "1",
                            Name = "delete",
                            ParentCode = "002",
                            PermissionCode = "00213"
                        },
                        new
                        {
                            Guid = new Guid("fdf286db-34b6-4a72-88eb-0673986c9669"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1336),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetClient",
                            Level = "1",
                            Name = "get",
                            ParentCode = "002",
                            PermissionCode = "00214"
                        },
                        new
                        {
                            Guid = new Guid("bfa71cc8-3c57-48b9-8c5a-2580b0c13ea2"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1339),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "AddClient",
                            Level = "1",
                            Name = "add",
                            ParentCode = "002",
                            PermissionCode = "00215"
                        },
                        new
                        {
                            Guid = new Guid("f16ed57f-202d-4576-8fc1-ca8453a33c5e"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1341),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "EditClient",
                            Level = "1",
                            Name = "edit",
                            ParentCode = "002",
                            PermissionCode = "00216"
                        },
                        new
                        {
                            Guid = new Guid("49f8de3d-173f-42b1-9cbb-411ad24d803e"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1344),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "RemoveClient",
                            Level = "1",
                            Name = "remove",
                            ParentCode = "002",
                            PermissionCode = "00217"
                        },
                        new
                        {
                            Guid = new Guid("a28a89cb-6f1b-4e9f-9e5c-9d5162c8e14a"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1347),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetAllEmployees",
                            Level = "1",
                            Name = "getall",
                            ParentCode = "002",
                            PermissionCode = "00218"
                        },
                        new
                        {
                            Guid = new Guid("7826b00c-6598-42ab-907c-0630c3b26744"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1350),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetEmployeesById",
                            Level = "1",
                            Name = "getbyid",
                            ParentCode = "002",
                            PermissionCode = "00219"
                        },
                        new
                        {
                            Guid = new Guid("97b0a3bb-e9db-483d-843a-d90bfa34968e"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1353),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Employee_Admin",
                            Level = "0",
                            Name = "employeeadmin",
                            ParentCode = "",
                            PermissionCode = "003"
                        },
                        new
                        {
                            Guid = new Guid("b849c1f6-96fd-4ab0-8e88-be0b789ec103"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1356),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Employee",
                            Level = "1",
                            Name = "createemployee",
                            ParentCode = "003",
                            PermissionCode = "00301"
                        },
                        new
                        {
                            Guid = new Guid("0f2159d1-2d65-4d5e-a1e1-f281adc7bdbe"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1361),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Employee",
                            Level = "1",
                            Name = "viewemployee",
                            ParentCode = "003",
                            PermissionCode = "00302"
                        },
                        new
                        {
                            Guid = new Guid("f1348b3c-c49f-4dfa-af7a-f3eb7bc1cbb6"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1364),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Employee",
                            Level = "1",
                            Name = "updateemployee",
                            ParentCode = "003",
                            PermissionCode = "00303"
                        },
                        new
                        {
                            Guid = new Guid("0ce9e1d0-975c-4eff-a768-d3b02af2012c"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1368),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_My_Profile",
                            Level = "1",
                            Name = "deleteuser",
                            ParentCode = "003",
                            PermissionCode = "00304"
                        },
                        new
                        {
                            Guid = new Guid("c1bcbf48-8d3e-4a57-ae40-4ca95fdd60dd"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1371),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_My_Profile",
                            Level = "1",
                            Name = "viewmyprofile",
                            ParentCode = "003",
                            PermissionCode = "00305"
                        },
                        new
                        {
                            Guid = new Guid("809f734f-3311-4ba2-b2ba-b771dc41e102"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1374),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_My_Profile",
                            Level = "1",
                            Name = "updatemyprofile",
                            ParentCode = "003",
                            PermissionCode = "00306"
                        },
                        new
                        {
                            Guid = new Guid("b1cfeb54-9aeb-4192-8197-3d3f02faf55b"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1377),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "User_Management_Admin",
                            Level = "0",
                            Name = "usermanagementadmin",
                            ParentCode = "",
                            PermissionCode = "004"
                        },
                        new
                        {
                            Guid = new Guid("4d9ef056-fc64-4fe4-bc16-bd5ecdeb9b94"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1380),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Group",
                            Level = "1",
                            Name = "creategroup",
                            ParentCode = "004",
                            PermissionCode = "00401"
                        },
                        new
                        {
                            Guid = new Guid("6b7861f0-26fc-4a1c-ab39-afb2e1c9e3f5"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1382),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Group",
                            Level = "1",
                            Name = "viewgroup",
                            ParentCode = "004",
                            PermissionCode = "00402"
                        },
                        new
                        {
                            Guid = new Guid("3edaa88b-6c11-4134-a5f0-6bb42747f52b"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1387),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Group",
                            Level = "1",
                            Name = "updategroup",
                            ParentCode = "004",
                            PermissionCode = "00403"
                        },
                        new
                        {
                            Guid = new Guid("8e18f6a1-78c1-4778-b624-8b3a657158d5"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1390),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Add_User",
                            Level = "1",
                            Name = "adduser",
                            ParentCode = "004",
                            PermissionCode = "00404"
                        },
                        new
                        {
                            Guid = new Guid("a63bc393-5d87-4d0b-8cfc-64160af9114a"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1393),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_User",
                            Level = "1",
                            Name = "viewuser",
                            ParentCode = "004",
                            PermissionCode = "00405"
                        },
                        new
                        {
                            Guid = new Guid("4c4c4dee-8e2a-4ef8-a727-dd1a79acdd49"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1396),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_User",
                            Level = "1",
                            Name = "updateuser",
                            ParentCode = "004",
                            PermissionCode = "00406"
                        },
                        new
                        {
                            Guid = new Guid("524a9685-c28e-4b1f-b19a-db2f3e8c43f3"),
                            CreatedDate = new DateTime(2021, 12, 31, 22, 48, 1, 762, DateTimeKind.Local).AddTicks(1399),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_User",
                            Level = "1",
                            Name = "deleteuser",
                            ParentCode = "004",
                            PermissionCode = "00407"
                        });
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.ApplicantAreaOfInterest", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.Applicant", "ApplicantInfo")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "LuPositionToApply")
                        .WithMany()
                        .HasForeignKey("LuPositionToApplyGuid");

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUProficiencyLevel", "ProficiencyLevel")
                        .WithMany()
                        .HasForeignKey("ProficiencyLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantInfo");

                    b.Navigation("LuPositionToApply");

                    b.Navigation("ProficiencyLevel");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Education", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUEducationProgram", "EducationProgramme")
                        .WithMany()
                        .HasForeignKey("EducationProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUFieldOfStudy", "FieldOfStudy")
                        .WithMany()
                        .HasForeignKey("FieldOfStudyId");

                    b.Navigation("Applicant");

                    b.Navigation("EducationProgramme");

                    b.Navigation("FieldOfStudy");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionSkillSet", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "LUPositionToApply")
                        .WithMany()
                        .HasForeignKey("LUPositionToApplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", "LUSkillSet")
                        .WithMany()
                        .HasForeignKey("LUSkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LUPositionToApply");

                    b.Navigation("LUSkillSet");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillPositionAssociation", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "luPositionToApply")
                        .WithMany()
                        .HasForeignKey("luPositionToApplyGuid");

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", "skillSet")
                        .WithMany()
                        .HasForeignKey("skillSetGuid");

                    b.Navigation("luPositionToApply");

                    b.Navigation("skillSet");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.BillingAddress", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("BillingAddress")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientContact", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("ClientContacts")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientStatus", "ClientStatus")
                        .WithMany()
                        .HasForeignKey("ClientStatusGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientStatus");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.CompanyContact", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("CompanyContacts")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.OperatingAddress", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("OperatingAddress")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.AssignResourcEntity", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Project", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", "Client")
                        .WithMany()
                        .HasForeignKey("ClientGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DutyBranch", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyContactsModel", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("EmergencyContact")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.DutyBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchGuid");

                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithOne("EmployeeOrganization")
                        .HasForeignKey("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.FamilyDetails", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("FamilyDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Nationality", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("Nationality")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.PersonalAddress", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("EmployeeAddress")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeEntry", b =>
                {
                    b.HasOne("Excellerent.Timesheet.Domain.Models.TimeSheet", "TimeSheet")
                        .WithMany("TimeEntry")
                        .HasForeignKey("TimesheetGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeSheet");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimesheetApproval", b =>
                {
                    b.HasOne("Excellerent.Timesheet.Domain.Models.TimeSheet", "Timesheet")
                        .WithMany()
                        .HasForeignKey("TimesheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Timesheet");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSetPermission", b =>
                {
                    b.HasOne("Excellerent.Usermanagement.Domain.Models.GroupSet", "GroupSet")
                        .WithMany()
                        .HasForeignKey("GroupSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Usermanagement.Domain.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupSet");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.User", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.Navigation("BillingAddress");

                    b.Navigation("ClientContacts");

                    b.Navigation("CompanyContacts");

                    b.Navigation("OperatingAddress");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Employee", b =>
                {
                    b.Navigation("EmergencyContact");

                    b.Navigation("EmployeeAddress");

                    b.Navigation("EmployeeOrganization");

                    b.Navigation("FamilyDetails");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.Navigation("TimeEntry");
                });
#pragma warning restore 612, 618
        }
    }
}
